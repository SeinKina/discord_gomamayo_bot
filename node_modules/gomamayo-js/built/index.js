"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const MeCab = __importStar(require("mecab-async"));
const vowel = require('../assets/vowel_define.json');
module.exports.find = findGomamayo;
async function findGomamayo(inputString) {
    const mecabRes = await analyseString(inputString);
    if (mecabRes) {
        if (mecabRes.length) {
            const gomamayoStrArray = [];
            mecabRes.forEach(gomamayo => {
                let mergedString = '';
                gomamayo.forEach(part => {
                    mergedString += part[0];
                });
                gomamayoStrArray.push(mergedString);
            });
            return [gomamayoStrArray, mecabRes];
        }
        else {
            return null;
        }
    }
    else {
    }
}
async function analyseString(inputStr) {
    const mecabPromise = (input) => new Promise((resolve, reject) => {
        MeCab.parse(input, function (error, result) {
            if (!error) {
                const gomamArray = [];
                for (let i = 1; i < result.length; i++) {
                    const prev = result[i - 1];
                    const now = result[i];
                    if (prev[1] === '名詞' && prev[2] !== '数詞' && now[1] === prev[1]) {
                        const prevYomi = (prev[9] === '*' || prev[9] === undefined) ? prolongedSoundMarkVowelize(prev[0]) : prolongedSoundMarkVowelize(prev[9]);
                        const nowYomi = (now[9] === '*' || now[9] === undefined) ? hiraToKana(now[0]) : hiraToKana(now[9]);
                        if (prevYomi.slice(-1) === nowYomi.slice(0, 1)) {
                            gomamArray.push([prev, now]);
                        }
                    }
                }
                resolve(gomamArray);
            }
            else {
                reject(error);
            }
            function hiraToKana(inStr) {
                return inStr.replace(/[ぁ-ゖ]/g, function (s) {
                    return String.fromCharCode(s.charCodeAt(0) + 0x60);
                });
            }
            function prolongedSoundMarkVowelize(string) {
                let converted = hiraToKana(string[0]);
                for (let i = 1; i < string.length; i++) {
                    const key = string[i - 1];
                    converted += (string[i] === 'ー') ? vowel[key] : string[i];
                }
                return converted;
            }
        });
    });
    try {
        return mecabPromise(sanitize(inputStr));
    }
    catch (error) {
        console.error(error);
    }
    function sanitize(inputStr) {
        return inputStr;
    }
}
